
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Rota
 * 
 */
export type Rota = $Result.DefaultSelection<Prisma.$RotaPayload>
/**
 * Model Seguir
 * 
 */
export type Seguir = $Result.DefaultSelection<Prisma.$SeguirPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.rota`: Exposes CRUD operations for the **Rota** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rotas
    * const rotas = await prisma.rota.findMany()
    * ```
    */
  get rota(): Prisma.RotaDelegate<ExtArgs>;

  /**
   * `prisma.seguir`: Exposes CRUD operations for the **Seguir** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Seguirs
    * const seguirs = await prisma.seguir.findMany()
    * ```
    */
  get seguir(): Prisma.SeguirDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Rota: 'Rota',
    Seguir: 'Seguir'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "rota" | "seguir"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Rota: {
        payload: Prisma.$RotaPayload<ExtArgs>
        fields: Prisma.RotaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RotaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RotaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          findFirst: {
            args: Prisma.RotaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RotaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          findMany: {
            args: Prisma.RotaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>[]
          }
          create: {
            args: Prisma.RotaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          createMany: {
            args: Prisma.RotaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RotaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>[]
          }
          delete: {
            args: Prisma.RotaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          update: {
            args: Prisma.RotaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          deleteMany: {
            args: Prisma.RotaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RotaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RotaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RotaPayload>
          }
          aggregate: {
            args: Prisma.RotaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRota>
          }
          groupBy: {
            args: Prisma.RotaGroupByArgs<ExtArgs>
            result: $Utils.Optional<RotaGroupByOutputType>[]
          }
          count: {
            args: Prisma.RotaCountArgs<ExtArgs>
            result: $Utils.Optional<RotaCountAggregateOutputType> | number
          }
        }
      }
      Seguir: {
        payload: Prisma.$SeguirPayload<ExtArgs>
        fields: Prisma.SeguirFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeguirFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeguirFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          findFirst: {
            args: Prisma.SeguirFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeguirFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          findMany: {
            args: Prisma.SeguirFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>[]
          }
          create: {
            args: Prisma.SeguirCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          createMany: {
            args: Prisma.SeguirCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeguirCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>[]
          }
          delete: {
            args: Prisma.SeguirDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          update: {
            args: Prisma.SeguirUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          deleteMany: {
            args: Prisma.SeguirDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeguirUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeguirUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeguirPayload>
          }
          aggregate: {
            args: Prisma.SeguirAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeguir>
          }
          groupBy: {
            args: Prisma.SeguirGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeguirGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeguirCountArgs<ExtArgs>
            result: $Utils.Optional<SeguirCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    rotas: number
    seguidores: number
    seguidos: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rotas?: boolean | UsuarioCountOutputTypeCountRotasArgs
    seguidores?: boolean | UsuarioCountOutputTypeCountSeguidoresArgs
    seguidos?: boolean | UsuarioCountOutputTypeCountSeguidosArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountRotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RotaWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSeguidoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguirWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountSeguidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguirWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    id: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data_nasc: Date | null
    avatar: string | null
    sexo: string | null
    status: boolean | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    senha: string | null
    data_nasc: Date | null
    avatar: string | null
    sexo: string | null
    status: boolean | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    data_nasc: number
    avatar: number
    sexo: number
    status: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    id?: true
  }

  export type UsuarioSumAggregateInputType = {
    id?: true
  }

  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data_nasc?: true
    avatar?: true
    sexo?: true
    status?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data_nasc?: true
    avatar?: true
    sexo?: true
    status?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    data_nasc?: true
    avatar?: true
    sexo?: true
    status?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: number
    nome: string
    email: string
    senha: string
    data_nasc: Date | null
    avatar: string | null
    sexo: string | null
    status: boolean
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data_nasc?: boolean
    avatar?: boolean
    sexo?: boolean
    status?: boolean
    rotas?: boolean | Usuario$rotasArgs<ExtArgs>
    seguidores?: boolean | Usuario$seguidoresArgs<ExtArgs>
    seguidos?: boolean | Usuario$seguidosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data_nasc?: boolean
    avatar?: boolean
    sexo?: boolean
    status?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    data_nasc?: boolean
    avatar?: boolean
    sexo?: boolean
    status?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rotas?: boolean | Usuario$rotasArgs<ExtArgs>
    seguidores?: boolean | Usuario$seguidoresArgs<ExtArgs>
    seguidos?: boolean | Usuario$seguidosArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      rotas: Prisma.$RotaPayload<ExtArgs>[]
      seguidores: Prisma.$SeguirPayload<ExtArgs>[]
      seguidos: Prisma.$SeguirPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      senha: string
      data_nasc: Date | null
      avatar: string | null
      sexo: string | null
      status: boolean
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rotas<T extends Usuario$rotasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$rotasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findMany"> | Null>
    seguidores<T extends Usuario$seguidoresArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$seguidoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findMany"> | Null>
    seguidos<T extends Usuario$seguidosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$seguidosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'Int'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly data_nasc: FieldRef<"Usuario", 'DateTime'>
    readonly avatar: FieldRef<"Usuario", 'String'>
    readonly sexo: FieldRef<"Usuario", 'String'>
    readonly status: FieldRef<"Usuario", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.rotas
   */
  export type Usuario$rotasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    where?: RotaWhereInput
    orderBy?: RotaOrderByWithRelationInput | RotaOrderByWithRelationInput[]
    cursor?: RotaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RotaScalarFieldEnum | RotaScalarFieldEnum[]
  }

  /**
   * Usuario.seguidores
   */
  export type Usuario$seguidoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    where?: SeguirWhereInput
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    cursor?: SeguirWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeguirScalarFieldEnum | SeguirScalarFieldEnum[]
  }

  /**
   * Usuario.seguidos
   */
  export type Usuario$seguidosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    where?: SeguirWhereInput
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    cursor?: SeguirWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeguirScalarFieldEnum | SeguirScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Rota
   */

  export type AggregateRota = {
    _count: RotaCountAggregateOutputType | null
    _avg: RotaAvgAggregateOutputType | null
    _sum: RotaSumAggregateOutputType | null
    _min: RotaMinAggregateOutputType | null
    _max: RotaMaxAggregateOutputType | null
  }

  export type RotaAvgAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RotaSumAggregateOutputType = {
    id: number | null
    usuarioId: number | null
  }

  export type RotaMinAggregateOutputType = {
    id: number | null
    nome: string | null
    usuarioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RotaMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    usuarioId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RotaCountAggregateOutputType = {
    id: number
    nome: number
    coordenadas: number
    usuarioId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RotaAvgAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RotaSumAggregateInputType = {
    id?: true
    usuarioId?: true
  }

  export type RotaMinAggregateInputType = {
    id?: true
    nome?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RotaMaxAggregateInputType = {
    id?: true
    nome?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RotaCountAggregateInputType = {
    id?: true
    nome?: true
    coordenadas?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RotaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rota to aggregate.
     */
    where?: RotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rotas to fetch.
     */
    orderBy?: RotaOrderByWithRelationInput | RotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rotas
    **/
    _count?: true | RotaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RotaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RotaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RotaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RotaMaxAggregateInputType
  }

  export type GetRotaAggregateType<T extends RotaAggregateArgs> = {
        [P in keyof T & keyof AggregateRota]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRota[P]>
      : GetScalarType<T[P], AggregateRota[P]>
  }




  export type RotaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RotaWhereInput
    orderBy?: RotaOrderByWithAggregationInput | RotaOrderByWithAggregationInput[]
    by: RotaScalarFieldEnum[] | RotaScalarFieldEnum
    having?: RotaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RotaCountAggregateInputType | true
    _avg?: RotaAvgAggregateInputType
    _sum?: RotaSumAggregateInputType
    _min?: RotaMinAggregateInputType
    _max?: RotaMaxAggregateInputType
  }

  export type RotaGroupByOutputType = {
    id: number
    nome: string
    coordenadas: JsonValue
    usuarioId: number
    createdAt: Date
    updatedAt: Date
    _count: RotaCountAggregateOutputType | null
    _avg: RotaAvgAggregateOutputType | null
    _sum: RotaSumAggregateOutputType | null
    _min: RotaMinAggregateOutputType | null
    _max: RotaMaxAggregateOutputType | null
  }

  type GetRotaGroupByPayload<T extends RotaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RotaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RotaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RotaGroupByOutputType[P]>
            : GetScalarType<T[P], RotaGroupByOutputType[P]>
        }
      >
    >


  export type RotaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    coordenadas?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rota"]>

  export type RotaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    coordenadas?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rota"]>

  export type RotaSelectScalar = {
    id?: boolean
    nome?: boolean
    coordenadas?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RotaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type RotaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $RotaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rota"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      coordenadas: Prisma.JsonValue
      usuarioId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rota"]>
    composites: {}
  }

  type RotaGetPayload<S extends boolean | null | undefined | RotaDefaultArgs> = $Result.GetResult<Prisma.$RotaPayload, S>

  type RotaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RotaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RotaCountAggregateInputType | true
    }

  export interface RotaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rota'], meta: { name: 'Rota' } }
    /**
     * Find zero or one Rota that matches the filter.
     * @param {RotaFindUniqueArgs} args - Arguments to find a Rota
     * @example
     * // Get one Rota
     * const rota = await prisma.rota.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RotaFindUniqueArgs>(args: SelectSubset<T, RotaFindUniqueArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rota that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RotaFindUniqueOrThrowArgs} args - Arguments to find a Rota
     * @example
     * // Get one Rota
     * const rota = await prisma.rota.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RotaFindUniqueOrThrowArgs>(args: SelectSubset<T, RotaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rota that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaFindFirstArgs} args - Arguments to find a Rota
     * @example
     * // Get one Rota
     * const rota = await prisma.rota.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RotaFindFirstArgs>(args?: SelectSubset<T, RotaFindFirstArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rota that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaFindFirstOrThrowArgs} args - Arguments to find a Rota
     * @example
     * // Get one Rota
     * const rota = await prisma.rota.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RotaFindFirstOrThrowArgs>(args?: SelectSubset<T, RotaFindFirstOrThrowArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rotas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rotas
     * const rotas = await prisma.rota.findMany()
     * 
     * // Get first 10 Rotas
     * const rotas = await prisma.rota.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rotaWithIdOnly = await prisma.rota.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RotaFindManyArgs>(args?: SelectSubset<T, RotaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rota.
     * @param {RotaCreateArgs} args - Arguments to create a Rota.
     * @example
     * // Create one Rota
     * const Rota = await prisma.rota.create({
     *   data: {
     *     // ... data to create a Rota
     *   }
     * })
     * 
     */
    create<T extends RotaCreateArgs>(args: SelectSubset<T, RotaCreateArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rotas.
     * @param {RotaCreateManyArgs} args - Arguments to create many Rotas.
     * @example
     * // Create many Rotas
     * const rota = await prisma.rota.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RotaCreateManyArgs>(args?: SelectSubset<T, RotaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rotas and returns the data saved in the database.
     * @param {RotaCreateManyAndReturnArgs} args - Arguments to create many Rotas.
     * @example
     * // Create many Rotas
     * const rota = await prisma.rota.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rotas and only return the `id`
     * const rotaWithIdOnly = await prisma.rota.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RotaCreateManyAndReturnArgs>(args?: SelectSubset<T, RotaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Rota.
     * @param {RotaDeleteArgs} args - Arguments to delete one Rota.
     * @example
     * // Delete one Rota
     * const Rota = await prisma.rota.delete({
     *   where: {
     *     // ... filter to delete one Rota
     *   }
     * })
     * 
     */
    delete<T extends RotaDeleteArgs>(args: SelectSubset<T, RotaDeleteArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rota.
     * @param {RotaUpdateArgs} args - Arguments to update one Rota.
     * @example
     * // Update one Rota
     * const rota = await prisma.rota.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RotaUpdateArgs>(args: SelectSubset<T, RotaUpdateArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rotas.
     * @param {RotaDeleteManyArgs} args - Arguments to filter Rotas to delete.
     * @example
     * // Delete a few Rotas
     * const { count } = await prisma.rota.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RotaDeleteManyArgs>(args?: SelectSubset<T, RotaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rotas
     * const rota = await prisma.rota.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RotaUpdateManyArgs>(args: SelectSubset<T, RotaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rota.
     * @param {RotaUpsertArgs} args - Arguments to update or create a Rota.
     * @example
     * // Update or create a Rota
     * const rota = await prisma.rota.upsert({
     *   create: {
     *     // ... data to create a Rota
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rota we want to update
     *   }
     * })
     */
    upsert<T extends RotaUpsertArgs>(args: SelectSubset<T, RotaUpsertArgs<ExtArgs>>): Prisma__RotaClient<$Result.GetResult<Prisma.$RotaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rotas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaCountArgs} args - Arguments to filter Rotas to count.
     * @example
     * // Count the number of Rotas
     * const count = await prisma.rota.count({
     *   where: {
     *     // ... the filter for the Rotas we want to count
     *   }
     * })
    **/
    count<T extends RotaCountArgs>(
      args?: Subset<T, RotaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RotaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RotaAggregateArgs>(args: Subset<T, RotaAggregateArgs>): Prisma.PrismaPromise<GetRotaAggregateType<T>>

    /**
     * Group by Rota.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RotaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RotaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RotaGroupByArgs['orderBy'] }
        : { orderBy?: RotaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RotaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRotaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rota model
   */
  readonly fields: RotaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rota.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RotaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rota model
   */ 
  interface RotaFieldRefs {
    readonly id: FieldRef<"Rota", 'Int'>
    readonly nome: FieldRef<"Rota", 'String'>
    readonly coordenadas: FieldRef<"Rota", 'Json'>
    readonly usuarioId: FieldRef<"Rota", 'Int'>
    readonly createdAt: FieldRef<"Rota", 'DateTime'>
    readonly updatedAt: FieldRef<"Rota", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rota findUnique
   */
  export type RotaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter, which Rota to fetch.
     */
    where: RotaWhereUniqueInput
  }

  /**
   * Rota findUniqueOrThrow
   */
  export type RotaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter, which Rota to fetch.
     */
    where: RotaWhereUniqueInput
  }

  /**
   * Rota findFirst
   */
  export type RotaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter, which Rota to fetch.
     */
    where?: RotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rotas to fetch.
     */
    orderBy?: RotaOrderByWithRelationInput | RotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rotas.
     */
    cursor?: RotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rotas.
     */
    distinct?: RotaScalarFieldEnum | RotaScalarFieldEnum[]
  }

  /**
   * Rota findFirstOrThrow
   */
  export type RotaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter, which Rota to fetch.
     */
    where?: RotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rotas to fetch.
     */
    orderBy?: RotaOrderByWithRelationInput | RotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rotas.
     */
    cursor?: RotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rotas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rotas.
     */
    distinct?: RotaScalarFieldEnum | RotaScalarFieldEnum[]
  }

  /**
   * Rota findMany
   */
  export type RotaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter, which Rotas to fetch.
     */
    where?: RotaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rotas to fetch.
     */
    orderBy?: RotaOrderByWithRelationInput | RotaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rotas.
     */
    cursor?: RotaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rotas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rotas.
     */
    skip?: number
    distinct?: RotaScalarFieldEnum | RotaScalarFieldEnum[]
  }

  /**
   * Rota create
   */
  export type RotaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * The data needed to create a Rota.
     */
    data: XOR<RotaCreateInput, RotaUncheckedCreateInput>
  }

  /**
   * Rota createMany
   */
  export type RotaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rotas.
     */
    data: RotaCreateManyInput | RotaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rota createManyAndReturn
   */
  export type RotaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rotas.
     */
    data: RotaCreateManyInput | RotaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rota update
   */
  export type RotaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * The data needed to update a Rota.
     */
    data: XOR<RotaUpdateInput, RotaUncheckedUpdateInput>
    /**
     * Choose, which Rota to update.
     */
    where: RotaWhereUniqueInput
  }

  /**
   * Rota updateMany
   */
  export type RotaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rotas.
     */
    data: XOR<RotaUpdateManyMutationInput, RotaUncheckedUpdateManyInput>
    /**
     * Filter which Rotas to update
     */
    where?: RotaWhereInput
  }

  /**
   * Rota upsert
   */
  export type RotaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * The filter to search for the Rota to update in case it exists.
     */
    where: RotaWhereUniqueInput
    /**
     * In case the Rota found by the `where` argument doesn't exist, create a new Rota with this data.
     */
    create: XOR<RotaCreateInput, RotaUncheckedCreateInput>
    /**
     * In case the Rota was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RotaUpdateInput, RotaUncheckedUpdateInput>
  }

  /**
   * Rota delete
   */
  export type RotaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
    /**
     * Filter which Rota to delete.
     */
    where: RotaWhereUniqueInput
  }

  /**
   * Rota deleteMany
   */
  export type RotaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rotas to delete
     */
    where?: RotaWhereInput
  }

  /**
   * Rota without action
   */
  export type RotaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rota
     */
    select?: RotaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RotaInclude<ExtArgs> | null
  }


  /**
   * Model Seguir
   */

  export type AggregateSeguir = {
    _count: SeguirCountAggregateOutputType | null
    _avg: SeguirAvgAggregateOutputType | null
    _sum: SeguirSumAggregateOutputType | null
    _min: SeguirMinAggregateOutputType | null
    _max: SeguirMaxAggregateOutputType | null
  }

  export type SeguirAvgAggregateOutputType = {
    id: number | null
    usuarioSeguidorId: number | null
    usuarioSeguidoId: number | null
  }

  export type SeguirSumAggregateOutputType = {
    id: number | null
    usuarioSeguidorId: number | null
    usuarioSeguidoId: number | null
  }

  export type SeguirMinAggregateOutputType = {
    id: number | null
    usuarioSeguidorId: number | null
    usuarioSeguidoId: number | null
  }

  export type SeguirMaxAggregateOutputType = {
    id: number | null
    usuarioSeguidorId: number | null
    usuarioSeguidoId: number | null
  }

  export type SeguirCountAggregateOutputType = {
    id: number
    usuarioSeguidorId: number
    usuarioSeguidoId: number
    _all: number
  }


  export type SeguirAvgAggregateInputType = {
    id?: true
    usuarioSeguidorId?: true
    usuarioSeguidoId?: true
  }

  export type SeguirSumAggregateInputType = {
    id?: true
    usuarioSeguidorId?: true
    usuarioSeguidoId?: true
  }

  export type SeguirMinAggregateInputType = {
    id?: true
    usuarioSeguidorId?: true
    usuarioSeguidoId?: true
  }

  export type SeguirMaxAggregateInputType = {
    id?: true
    usuarioSeguidorId?: true
    usuarioSeguidoId?: true
  }

  export type SeguirCountAggregateInputType = {
    id?: true
    usuarioSeguidorId?: true
    usuarioSeguidoId?: true
    _all?: true
  }

  export type SeguirAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seguir to aggregate.
     */
    where?: SeguirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguirs to fetch.
     */
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeguirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Seguirs
    **/
    _count?: true | SeguirCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeguirAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeguirSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeguirMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeguirMaxAggregateInputType
  }

  export type GetSeguirAggregateType<T extends SeguirAggregateArgs> = {
        [P in keyof T & keyof AggregateSeguir]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeguir[P]>
      : GetScalarType<T[P], AggregateSeguir[P]>
  }




  export type SeguirGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeguirWhereInput
    orderBy?: SeguirOrderByWithAggregationInput | SeguirOrderByWithAggregationInput[]
    by: SeguirScalarFieldEnum[] | SeguirScalarFieldEnum
    having?: SeguirScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeguirCountAggregateInputType | true
    _avg?: SeguirAvgAggregateInputType
    _sum?: SeguirSumAggregateInputType
    _min?: SeguirMinAggregateInputType
    _max?: SeguirMaxAggregateInputType
  }

  export type SeguirGroupByOutputType = {
    id: number
    usuarioSeguidorId: number
    usuarioSeguidoId: number
    _count: SeguirCountAggregateOutputType | null
    _avg: SeguirAvgAggregateOutputType | null
    _sum: SeguirSumAggregateOutputType | null
    _min: SeguirMinAggregateOutputType | null
    _max: SeguirMaxAggregateOutputType | null
  }

  type GetSeguirGroupByPayload<T extends SeguirGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeguirGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeguirGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeguirGroupByOutputType[P]>
            : GetScalarType<T[P], SeguirGroupByOutputType[P]>
        }
      >
    >


  export type SeguirSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioSeguidorId?: boolean
    usuarioSeguidoId?: boolean
    usuarioSeguidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    usuarioSeguido?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seguir"]>

  export type SeguirSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuarioSeguidorId?: boolean
    usuarioSeguidoId?: boolean
    usuarioSeguidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    usuarioSeguido?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seguir"]>

  export type SeguirSelectScalar = {
    id?: boolean
    usuarioSeguidorId?: boolean
    usuarioSeguidoId?: boolean
  }

  export type SeguirInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioSeguidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    usuarioSeguido?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type SeguirIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuarioSeguidor?: boolean | UsuarioDefaultArgs<ExtArgs>
    usuarioSeguido?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $SeguirPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Seguir"
    objects: {
      usuarioSeguidor: Prisma.$UsuarioPayload<ExtArgs>
      usuarioSeguido: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuarioSeguidorId: number
      usuarioSeguidoId: number
    }, ExtArgs["result"]["seguir"]>
    composites: {}
  }

  type SeguirGetPayload<S extends boolean | null | undefined | SeguirDefaultArgs> = $Result.GetResult<Prisma.$SeguirPayload, S>

  type SeguirCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeguirFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeguirCountAggregateInputType | true
    }

  export interface SeguirDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Seguir'], meta: { name: 'Seguir' } }
    /**
     * Find zero or one Seguir that matches the filter.
     * @param {SeguirFindUniqueArgs} args - Arguments to find a Seguir
     * @example
     * // Get one Seguir
     * const seguir = await prisma.seguir.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeguirFindUniqueArgs>(args: SelectSubset<T, SeguirFindUniqueArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Seguir that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeguirFindUniqueOrThrowArgs} args - Arguments to find a Seguir
     * @example
     * // Get one Seguir
     * const seguir = await prisma.seguir.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeguirFindUniqueOrThrowArgs>(args: SelectSubset<T, SeguirFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Seguir that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirFindFirstArgs} args - Arguments to find a Seguir
     * @example
     * // Get one Seguir
     * const seguir = await prisma.seguir.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeguirFindFirstArgs>(args?: SelectSubset<T, SeguirFindFirstArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Seguir that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirFindFirstOrThrowArgs} args - Arguments to find a Seguir
     * @example
     * // Get one Seguir
     * const seguir = await prisma.seguir.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeguirFindFirstOrThrowArgs>(args?: SelectSubset<T, SeguirFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Seguirs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Seguirs
     * const seguirs = await prisma.seguir.findMany()
     * 
     * // Get first 10 Seguirs
     * const seguirs = await prisma.seguir.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const seguirWithIdOnly = await prisma.seguir.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SeguirFindManyArgs>(args?: SelectSubset<T, SeguirFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Seguir.
     * @param {SeguirCreateArgs} args - Arguments to create a Seguir.
     * @example
     * // Create one Seguir
     * const Seguir = await prisma.seguir.create({
     *   data: {
     *     // ... data to create a Seguir
     *   }
     * })
     * 
     */
    create<T extends SeguirCreateArgs>(args: SelectSubset<T, SeguirCreateArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Seguirs.
     * @param {SeguirCreateManyArgs} args - Arguments to create many Seguirs.
     * @example
     * // Create many Seguirs
     * const seguir = await prisma.seguir.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeguirCreateManyArgs>(args?: SelectSubset<T, SeguirCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Seguirs and returns the data saved in the database.
     * @param {SeguirCreateManyAndReturnArgs} args - Arguments to create many Seguirs.
     * @example
     * // Create many Seguirs
     * const seguir = await prisma.seguir.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Seguirs and only return the `id`
     * const seguirWithIdOnly = await prisma.seguir.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeguirCreateManyAndReturnArgs>(args?: SelectSubset<T, SeguirCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Seguir.
     * @param {SeguirDeleteArgs} args - Arguments to delete one Seguir.
     * @example
     * // Delete one Seguir
     * const Seguir = await prisma.seguir.delete({
     *   where: {
     *     // ... filter to delete one Seguir
     *   }
     * })
     * 
     */
    delete<T extends SeguirDeleteArgs>(args: SelectSubset<T, SeguirDeleteArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Seguir.
     * @param {SeguirUpdateArgs} args - Arguments to update one Seguir.
     * @example
     * // Update one Seguir
     * const seguir = await prisma.seguir.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeguirUpdateArgs>(args: SelectSubset<T, SeguirUpdateArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Seguirs.
     * @param {SeguirDeleteManyArgs} args - Arguments to filter Seguirs to delete.
     * @example
     * // Delete a few Seguirs
     * const { count } = await prisma.seguir.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeguirDeleteManyArgs>(args?: SelectSubset<T, SeguirDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Seguirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Seguirs
     * const seguir = await prisma.seguir.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeguirUpdateManyArgs>(args: SelectSubset<T, SeguirUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Seguir.
     * @param {SeguirUpsertArgs} args - Arguments to update or create a Seguir.
     * @example
     * // Update or create a Seguir
     * const seguir = await prisma.seguir.upsert({
     *   create: {
     *     // ... data to create a Seguir
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Seguir we want to update
     *   }
     * })
     */
    upsert<T extends SeguirUpsertArgs>(args: SelectSubset<T, SeguirUpsertArgs<ExtArgs>>): Prisma__SeguirClient<$Result.GetResult<Prisma.$SeguirPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Seguirs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirCountArgs} args - Arguments to filter Seguirs to count.
     * @example
     * // Count the number of Seguirs
     * const count = await prisma.seguir.count({
     *   where: {
     *     // ... the filter for the Seguirs we want to count
     *   }
     * })
    **/
    count<T extends SeguirCountArgs>(
      args?: Subset<T, SeguirCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeguirCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Seguir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeguirAggregateArgs>(args: Subset<T, SeguirAggregateArgs>): Prisma.PrismaPromise<GetSeguirAggregateType<T>>

    /**
     * Group by Seguir.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeguirGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeguirGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeguirGroupByArgs['orderBy'] }
        : { orderBy?: SeguirGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeguirGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeguirGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Seguir model
   */
  readonly fields: SeguirFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Seguir.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeguirClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuarioSeguidor<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    usuarioSeguido<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Seguir model
   */ 
  interface SeguirFieldRefs {
    readonly id: FieldRef<"Seguir", 'Int'>
    readonly usuarioSeguidorId: FieldRef<"Seguir", 'Int'>
    readonly usuarioSeguidoId: FieldRef<"Seguir", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Seguir findUnique
   */
  export type SeguirFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter, which Seguir to fetch.
     */
    where: SeguirWhereUniqueInput
  }

  /**
   * Seguir findUniqueOrThrow
   */
  export type SeguirFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter, which Seguir to fetch.
     */
    where: SeguirWhereUniqueInput
  }

  /**
   * Seguir findFirst
   */
  export type SeguirFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter, which Seguir to fetch.
     */
    where?: SeguirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguirs to fetch.
     */
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seguirs.
     */
    cursor?: SeguirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seguirs.
     */
    distinct?: SeguirScalarFieldEnum | SeguirScalarFieldEnum[]
  }

  /**
   * Seguir findFirstOrThrow
   */
  export type SeguirFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter, which Seguir to fetch.
     */
    where?: SeguirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguirs to fetch.
     */
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Seguirs.
     */
    cursor?: SeguirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguirs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Seguirs.
     */
    distinct?: SeguirScalarFieldEnum | SeguirScalarFieldEnum[]
  }

  /**
   * Seguir findMany
   */
  export type SeguirFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter, which Seguirs to fetch.
     */
    where?: SeguirWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Seguirs to fetch.
     */
    orderBy?: SeguirOrderByWithRelationInput | SeguirOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Seguirs.
     */
    cursor?: SeguirWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Seguirs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Seguirs.
     */
    skip?: number
    distinct?: SeguirScalarFieldEnum | SeguirScalarFieldEnum[]
  }

  /**
   * Seguir create
   */
  export type SeguirCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * The data needed to create a Seguir.
     */
    data: XOR<SeguirCreateInput, SeguirUncheckedCreateInput>
  }

  /**
   * Seguir createMany
   */
  export type SeguirCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Seguirs.
     */
    data: SeguirCreateManyInput | SeguirCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Seguir createManyAndReturn
   */
  export type SeguirCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Seguirs.
     */
    data: SeguirCreateManyInput | SeguirCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Seguir update
   */
  export type SeguirUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * The data needed to update a Seguir.
     */
    data: XOR<SeguirUpdateInput, SeguirUncheckedUpdateInput>
    /**
     * Choose, which Seguir to update.
     */
    where: SeguirWhereUniqueInput
  }

  /**
   * Seguir updateMany
   */
  export type SeguirUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Seguirs.
     */
    data: XOR<SeguirUpdateManyMutationInput, SeguirUncheckedUpdateManyInput>
    /**
     * Filter which Seguirs to update
     */
    where?: SeguirWhereInput
  }

  /**
   * Seguir upsert
   */
  export type SeguirUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * The filter to search for the Seguir to update in case it exists.
     */
    where: SeguirWhereUniqueInput
    /**
     * In case the Seguir found by the `where` argument doesn't exist, create a new Seguir with this data.
     */
    create: XOR<SeguirCreateInput, SeguirUncheckedCreateInput>
    /**
     * In case the Seguir was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeguirUpdateInput, SeguirUncheckedUpdateInput>
  }

  /**
   * Seguir delete
   */
  export type SeguirDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
    /**
     * Filter which Seguir to delete.
     */
    where: SeguirWhereUniqueInput
  }

  /**
   * Seguir deleteMany
   */
  export type SeguirDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Seguirs to delete
     */
    where?: SeguirWhereInput
  }

  /**
   * Seguir without action
   */
  export type SeguirDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Seguir
     */
    select?: SeguirSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeguirInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    data_nasc: 'data_nasc',
    avatar: 'avatar',
    sexo: 'sexo',
    status: 'status'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const RotaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    coordenadas: 'coordenadas',
    usuarioId: 'usuarioId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RotaScalarFieldEnum = (typeof RotaScalarFieldEnum)[keyof typeof RotaScalarFieldEnum]


  export const SeguirScalarFieldEnum: {
    id: 'id',
    usuarioSeguidorId: 'usuarioSeguidorId',
    usuarioSeguidoId: 'usuarioSeguidoId'
  };

  export type SeguirScalarFieldEnum = (typeof SeguirScalarFieldEnum)[keyof typeof SeguirScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: IntFilter<"Usuario"> | number
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    data_nasc?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    avatar?: StringNullableFilter<"Usuario"> | string | null
    sexo?: StringNullableFilter<"Usuario"> | string | null
    status?: BoolFilter<"Usuario"> | boolean
    rotas?: RotaListRelationFilter
    seguidores?: SeguirListRelationFilter
    seguidos?: SeguirListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_nasc?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    sexo?: SortOrderInput | SortOrder
    status?: SortOrder
    rotas?: RotaOrderByRelationAggregateInput
    seguidores?: SeguirOrderByRelationAggregateInput
    seguidos?: SeguirOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    data_nasc?: DateTimeNullableFilter<"Usuario"> | Date | string | null
    avatar?: StringNullableFilter<"Usuario"> | string | null
    sexo?: StringNullableFilter<"Usuario"> | string | null
    status?: BoolFilter<"Usuario"> | boolean
    rotas?: RotaListRelationFilter
    seguidores?: SeguirListRelationFilter
    seguidos?: SeguirListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_nasc?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    sexo?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _avg?: UsuarioAvgOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
    _sum?: UsuarioSumOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Usuario"> | number
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    data_nasc?: DateTimeNullableWithAggregatesFilter<"Usuario"> | Date | string | null
    avatar?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    sexo?: StringNullableWithAggregatesFilter<"Usuario"> | string | null
    status?: BoolWithAggregatesFilter<"Usuario"> | boolean
  }

  export type RotaWhereInput = {
    AND?: RotaWhereInput | RotaWhereInput[]
    OR?: RotaWhereInput[]
    NOT?: RotaWhereInput | RotaWhereInput[]
    id?: IntFilter<"Rota"> | number
    nome?: StringFilter<"Rota"> | string
    coordenadas?: JsonFilter<"Rota">
    usuarioId?: IntFilter<"Rota"> | number
    createdAt?: DateTimeFilter<"Rota"> | Date | string
    updatedAt?: DateTimeFilter<"Rota"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type RotaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    coordenadas?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type RotaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RotaWhereInput | RotaWhereInput[]
    OR?: RotaWhereInput[]
    NOT?: RotaWhereInput | RotaWhereInput[]
    nome?: StringFilter<"Rota"> | string
    coordenadas?: JsonFilter<"Rota">
    usuarioId?: IntFilter<"Rota"> | number
    createdAt?: DateTimeFilter<"Rota"> | Date | string
    updatedAt?: DateTimeFilter<"Rota"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type RotaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    coordenadas?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RotaCountOrderByAggregateInput
    _avg?: RotaAvgOrderByAggregateInput
    _max?: RotaMaxOrderByAggregateInput
    _min?: RotaMinOrderByAggregateInput
    _sum?: RotaSumOrderByAggregateInput
  }

  export type RotaScalarWhereWithAggregatesInput = {
    AND?: RotaScalarWhereWithAggregatesInput | RotaScalarWhereWithAggregatesInput[]
    OR?: RotaScalarWhereWithAggregatesInput[]
    NOT?: RotaScalarWhereWithAggregatesInput | RotaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rota"> | number
    nome?: StringWithAggregatesFilter<"Rota"> | string
    coordenadas?: JsonWithAggregatesFilter<"Rota">
    usuarioId?: IntWithAggregatesFilter<"Rota"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Rota"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rota"> | Date | string
  }

  export type SeguirWhereInput = {
    AND?: SeguirWhereInput | SeguirWhereInput[]
    OR?: SeguirWhereInput[]
    NOT?: SeguirWhereInput | SeguirWhereInput[]
    id?: IntFilter<"Seguir"> | number
    usuarioSeguidorId?: IntFilter<"Seguir"> | number
    usuarioSeguidoId?: IntFilter<"Seguir"> | number
    usuarioSeguidor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    usuarioSeguido?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type SeguirOrderByWithRelationInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
    usuarioSeguidor?: UsuarioOrderByWithRelationInput
    usuarioSeguido?: UsuarioOrderByWithRelationInput
  }

  export type SeguirWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuarioSeguidorId_usuarioSeguidoId?: SeguirUsuarioSeguidorIdUsuarioSeguidoIdCompoundUniqueInput
    AND?: SeguirWhereInput | SeguirWhereInput[]
    OR?: SeguirWhereInput[]
    NOT?: SeguirWhereInput | SeguirWhereInput[]
    usuarioSeguidorId?: IntFilter<"Seguir"> | number
    usuarioSeguidoId?: IntFilter<"Seguir"> | number
    usuarioSeguidor?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    usuarioSeguido?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id" | "usuarioSeguidorId_usuarioSeguidoId">

  export type SeguirOrderByWithAggregationInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
    _count?: SeguirCountOrderByAggregateInput
    _avg?: SeguirAvgOrderByAggregateInput
    _max?: SeguirMaxOrderByAggregateInput
    _min?: SeguirMinOrderByAggregateInput
    _sum?: SeguirSumOrderByAggregateInput
  }

  export type SeguirScalarWhereWithAggregatesInput = {
    AND?: SeguirScalarWhereWithAggregatesInput | SeguirScalarWhereWithAggregatesInput[]
    OR?: SeguirScalarWhereWithAggregatesInput[]
    NOT?: SeguirScalarWhereWithAggregatesInput | SeguirScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Seguir"> | number
    usuarioSeguidorId?: IntWithAggregatesFilter<"Seguir"> | number
    usuarioSeguidoId?: IntWithAggregatesFilter<"Seguir"> | number
  }

  export type UsuarioCreateInput = {
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaCreateNestedManyWithoutUsuarioInput
    seguidores?: SeguirCreateNestedManyWithoutUsuarioSeguidorInput
    seguidos?: SeguirCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaUncheckedCreateNestedManyWithoutUsuarioInput
    seguidores?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidorInput
    seguidos?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUpdateManyWithoutUsuarioNestedInput
    seguidores?: SeguirUpdateManyWithoutUsuarioSeguidorNestedInput
    seguidos?: SeguirUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUncheckedUpdateManyWithoutUsuarioNestedInput
    seguidores?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidorNestedInput
    seguidos?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
  }

  export type UsuarioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RotaCreateInput = {
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuarioCreateNestedOneWithoutRotasInput
  }

  export type RotaUncheckedCreateInput = {
    id?: number
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    usuarioId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RotaUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutRotasNestedInput
  }

  export type RotaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    usuarioId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RotaCreateManyInput = {
    id?: number
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    usuarioId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RotaUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RotaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    usuarioId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguirCreateInput = {
    usuarioSeguidor: UsuarioCreateNestedOneWithoutSeguidoresInput
    usuarioSeguido: UsuarioCreateNestedOneWithoutSeguidosInput
  }

  export type SeguirUncheckedCreateInput = {
    id?: number
    usuarioSeguidorId: number
    usuarioSeguidoId: number
  }

  export type SeguirUpdateInput = {
    usuarioSeguidor?: UsuarioUpdateOneRequiredWithoutSeguidoresNestedInput
    usuarioSeguido?: UsuarioUpdateOneRequiredWithoutSeguidosNestedInput
  }

  export type SeguirUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidorId?: IntFieldUpdateOperationsInput | number
    usuarioSeguidoId?: IntFieldUpdateOperationsInput | number
  }

  export type SeguirCreateManyInput = {
    id?: number
    usuarioSeguidorId: number
    usuarioSeguidoId: number
  }

  export type SeguirUpdateManyMutationInput = {

  }

  export type SeguirUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidorId?: IntFieldUpdateOperationsInput | number
    usuarioSeguidoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RotaListRelationFilter = {
    every?: RotaWhereInput
    some?: RotaWhereInput
    none?: RotaWhereInput
  }

  export type SeguirListRelationFilter = {
    every?: SeguirWhereInput
    some?: SeguirWhereInput
    none?: SeguirWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RotaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeguirOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_nasc?: SortOrder
    avatar?: SortOrder
    sexo?: SortOrder
    status?: SortOrder
  }

  export type UsuarioAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_nasc?: SortOrder
    avatar?: SortOrder
    sexo?: SortOrder
    status?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    data_nasc?: SortOrder
    avatar?: SortOrder
    sexo?: SortOrder
    status?: SortOrder
  }

  export type UsuarioSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type RotaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    coordenadas?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RotaAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }

  export type RotaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RotaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RotaSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type SeguirUsuarioSeguidorIdUsuarioSeguidoIdCompoundUniqueInput = {
    usuarioSeguidorId: number
    usuarioSeguidoId: number
  }

  export type SeguirCountOrderByAggregateInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
  }

  export type SeguirAvgOrderByAggregateInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
  }

  export type SeguirMaxOrderByAggregateInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
  }

  export type SeguirMinOrderByAggregateInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
  }

  export type SeguirSumOrderByAggregateInput = {
    id?: SortOrder
    usuarioSeguidorId?: SortOrder
    usuarioSeguidoId?: SortOrder
  }

  export type RotaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput> | RotaCreateWithoutUsuarioInput[] | RotaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RotaCreateOrConnectWithoutUsuarioInput | RotaCreateOrConnectWithoutUsuarioInput[]
    createMany?: RotaCreateManyUsuarioInputEnvelope
    connect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
  }

  export type SeguirCreateNestedManyWithoutUsuarioSeguidorInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput> | SeguirCreateWithoutUsuarioSeguidorInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidorInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidorInput | SeguirCreateOrConnectWithoutUsuarioSeguidorInput[]
    createMany?: SeguirCreateManyUsuarioSeguidorInputEnvelope
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
  }

  export type SeguirCreateNestedManyWithoutUsuarioSeguidoInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput> | SeguirCreateWithoutUsuarioSeguidoInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidoInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidoInput | SeguirCreateOrConnectWithoutUsuarioSeguidoInput[]
    createMany?: SeguirCreateManyUsuarioSeguidoInputEnvelope
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
  }

  export type RotaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput> | RotaCreateWithoutUsuarioInput[] | RotaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RotaCreateOrConnectWithoutUsuarioInput | RotaCreateOrConnectWithoutUsuarioInput[]
    createMany?: RotaCreateManyUsuarioInputEnvelope
    connect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
  }

  export type SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidorInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput> | SeguirCreateWithoutUsuarioSeguidorInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidorInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidorInput | SeguirCreateOrConnectWithoutUsuarioSeguidorInput[]
    createMany?: SeguirCreateManyUsuarioSeguidorInputEnvelope
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
  }

  export type SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidoInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput> | SeguirCreateWithoutUsuarioSeguidoInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidoInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidoInput | SeguirCreateOrConnectWithoutUsuarioSeguidoInput[]
    createMany?: SeguirCreateManyUsuarioSeguidoInputEnvelope
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RotaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput> | RotaCreateWithoutUsuarioInput[] | RotaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RotaCreateOrConnectWithoutUsuarioInput | RotaCreateOrConnectWithoutUsuarioInput[]
    upsert?: RotaUpsertWithWhereUniqueWithoutUsuarioInput | RotaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RotaCreateManyUsuarioInputEnvelope
    set?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    disconnect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    delete?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    connect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    update?: RotaUpdateWithWhereUniqueWithoutUsuarioInput | RotaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RotaUpdateManyWithWhereWithoutUsuarioInput | RotaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RotaScalarWhereInput | RotaScalarWhereInput[]
  }

  export type SeguirUpdateManyWithoutUsuarioSeguidorNestedInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput> | SeguirCreateWithoutUsuarioSeguidorInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidorInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidorInput | SeguirCreateOrConnectWithoutUsuarioSeguidorInput[]
    upsert?: SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidorInput | SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidorInput[]
    createMany?: SeguirCreateManyUsuarioSeguidorInputEnvelope
    set?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    disconnect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    delete?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    update?: SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidorInput | SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidorInput[]
    updateMany?: SeguirUpdateManyWithWhereWithoutUsuarioSeguidorInput | SeguirUpdateManyWithWhereWithoutUsuarioSeguidorInput[]
    deleteMany?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
  }

  export type SeguirUpdateManyWithoutUsuarioSeguidoNestedInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput> | SeguirCreateWithoutUsuarioSeguidoInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidoInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidoInput | SeguirCreateOrConnectWithoutUsuarioSeguidoInput[]
    upsert?: SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidoInput | SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidoInput[]
    createMany?: SeguirCreateManyUsuarioSeguidoInputEnvelope
    set?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    disconnect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    delete?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    update?: SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidoInput | SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidoInput[]
    updateMany?: SeguirUpdateManyWithWhereWithoutUsuarioSeguidoInput | SeguirUpdateManyWithWhereWithoutUsuarioSeguidoInput[]
    deleteMany?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RotaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput> | RotaCreateWithoutUsuarioInput[] | RotaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: RotaCreateOrConnectWithoutUsuarioInput | RotaCreateOrConnectWithoutUsuarioInput[]
    upsert?: RotaUpsertWithWhereUniqueWithoutUsuarioInput | RotaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: RotaCreateManyUsuarioInputEnvelope
    set?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    disconnect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    delete?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    connect?: RotaWhereUniqueInput | RotaWhereUniqueInput[]
    update?: RotaUpdateWithWhereUniqueWithoutUsuarioInput | RotaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: RotaUpdateManyWithWhereWithoutUsuarioInput | RotaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: RotaScalarWhereInput | RotaScalarWhereInput[]
  }

  export type SeguirUncheckedUpdateManyWithoutUsuarioSeguidorNestedInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput> | SeguirCreateWithoutUsuarioSeguidorInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidorInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidorInput | SeguirCreateOrConnectWithoutUsuarioSeguidorInput[]
    upsert?: SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidorInput | SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidorInput[]
    createMany?: SeguirCreateManyUsuarioSeguidorInputEnvelope
    set?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    disconnect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    delete?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    update?: SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidorInput | SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidorInput[]
    updateMany?: SeguirUpdateManyWithWhereWithoutUsuarioSeguidorInput | SeguirUpdateManyWithWhereWithoutUsuarioSeguidorInput[]
    deleteMany?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
  }

  export type SeguirUncheckedUpdateManyWithoutUsuarioSeguidoNestedInput = {
    create?: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput> | SeguirCreateWithoutUsuarioSeguidoInput[] | SeguirUncheckedCreateWithoutUsuarioSeguidoInput[]
    connectOrCreate?: SeguirCreateOrConnectWithoutUsuarioSeguidoInput | SeguirCreateOrConnectWithoutUsuarioSeguidoInput[]
    upsert?: SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidoInput | SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidoInput[]
    createMany?: SeguirCreateManyUsuarioSeguidoInputEnvelope
    set?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    disconnect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    delete?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    connect?: SeguirWhereUniqueInput | SeguirWhereUniqueInput[]
    update?: SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidoInput | SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidoInput[]
    updateMany?: SeguirUpdateManyWithWhereWithoutUsuarioSeguidoInput | SeguirUpdateManyWithWhereWithoutUsuarioSeguidoInput[]
    deleteMany?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutRotasInput = {
    create?: XOR<UsuarioCreateWithoutRotasInput, UsuarioUncheckedCreateWithoutRotasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRotasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsuarioUpdateOneRequiredWithoutRotasNestedInput = {
    create?: XOR<UsuarioCreateWithoutRotasInput, UsuarioUncheckedCreateWithoutRotasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutRotasInput
    upsert?: UsuarioUpsertWithoutRotasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutRotasInput, UsuarioUpdateWithoutRotasInput>, UsuarioUncheckedUpdateWithoutRotasInput>
  }

  export type UsuarioCreateNestedOneWithoutSeguidoresInput = {
    create?: XOR<UsuarioCreateWithoutSeguidoresInput, UsuarioUncheckedCreateWithoutSeguidoresInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguidoresInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutSeguidosInput = {
    create?: XOR<UsuarioCreateWithoutSeguidosInput, UsuarioUncheckedCreateWithoutSeguidosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguidosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutSeguidoresNestedInput = {
    create?: XOR<UsuarioCreateWithoutSeguidoresInput, UsuarioUncheckedCreateWithoutSeguidoresInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguidoresInput
    upsert?: UsuarioUpsertWithoutSeguidoresInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSeguidoresInput, UsuarioUpdateWithoutSeguidoresInput>, UsuarioUncheckedUpdateWithoutSeguidoresInput>
  }

  export type UsuarioUpdateOneRequiredWithoutSeguidosNestedInput = {
    create?: XOR<UsuarioCreateWithoutSeguidosInput, UsuarioUncheckedCreateWithoutSeguidosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutSeguidosInput
    upsert?: UsuarioUpsertWithoutSeguidosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutSeguidosInput, UsuarioUpdateWithoutSeguidosInput>, UsuarioUncheckedUpdateWithoutSeguidosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RotaCreateWithoutUsuarioInput = {
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RotaUncheckedCreateWithoutUsuarioInput = {
    id?: number
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RotaCreateOrConnectWithoutUsuarioInput = {
    where: RotaWhereUniqueInput
    create: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput>
  }

  export type RotaCreateManyUsuarioInputEnvelope = {
    data: RotaCreateManyUsuarioInput | RotaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type SeguirCreateWithoutUsuarioSeguidorInput = {
    usuarioSeguido: UsuarioCreateNestedOneWithoutSeguidosInput
  }

  export type SeguirUncheckedCreateWithoutUsuarioSeguidorInput = {
    id?: number
    usuarioSeguidoId: number
  }

  export type SeguirCreateOrConnectWithoutUsuarioSeguidorInput = {
    where: SeguirWhereUniqueInput
    create: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput>
  }

  export type SeguirCreateManyUsuarioSeguidorInputEnvelope = {
    data: SeguirCreateManyUsuarioSeguidorInput | SeguirCreateManyUsuarioSeguidorInput[]
    skipDuplicates?: boolean
  }

  export type SeguirCreateWithoutUsuarioSeguidoInput = {
    usuarioSeguidor: UsuarioCreateNestedOneWithoutSeguidoresInput
  }

  export type SeguirUncheckedCreateWithoutUsuarioSeguidoInput = {
    id?: number
    usuarioSeguidorId: number
  }

  export type SeguirCreateOrConnectWithoutUsuarioSeguidoInput = {
    where: SeguirWhereUniqueInput
    create: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput>
  }

  export type SeguirCreateManyUsuarioSeguidoInputEnvelope = {
    data: SeguirCreateManyUsuarioSeguidoInput | SeguirCreateManyUsuarioSeguidoInput[]
    skipDuplicates?: boolean
  }

  export type RotaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: RotaWhereUniqueInput
    update: XOR<RotaUpdateWithoutUsuarioInput, RotaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<RotaCreateWithoutUsuarioInput, RotaUncheckedCreateWithoutUsuarioInput>
  }

  export type RotaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: RotaWhereUniqueInput
    data: XOR<RotaUpdateWithoutUsuarioInput, RotaUncheckedUpdateWithoutUsuarioInput>
  }

  export type RotaUpdateManyWithWhereWithoutUsuarioInput = {
    where: RotaScalarWhereInput
    data: XOR<RotaUpdateManyMutationInput, RotaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type RotaScalarWhereInput = {
    AND?: RotaScalarWhereInput | RotaScalarWhereInput[]
    OR?: RotaScalarWhereInput[]
    NOT?: RotaScalarWhereInput | RotaScalarWhereInput[]
    id?: IntFilter<"Rota"> | number
    nome?: StringFilter<"Rota"> | string
    coordenadas?: JsonFilter<"Rota">
    usuarioId?: IntFilter<"Rota"> | number
    createdAt?: DateTimeFilter<"Rota"> | Date | string
    updatedAt?: DateTimeFilter<"Rota"> | Date | string
  }

  export type SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidorInput = {
    where: SeguirWhereUniqueInput
    update: XOR<SeguirUpdateWithoutUsuarioSeguidorInput, SeguirUncheckedUpdateWithoutUsuarioSeguidorInput>
    create: XOR<SeguirCreateWithoutUsuarioSeguidorInput, SeguirUncheckedCreateWithoutUsuarioSeguidorInput>
  }

  export type SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidorInput = {
    where: SeguirWhereUniqueInput
    data: XOR<SeguirUpdateWithoutUsuarioSeguidorInput, SeguirUncheckedUpdateWithoutUsuarioSeguidorInput>
  }

  export type SeguirUpdateManyWithWhereWithoutUsuarioSeguidorInput = {
    where: SeguirScalarWhereInput
    data: XOR<SeguirUpdateManyMutationInput, SeguirUncheckedUpdateManyWithoutUsuarioSeguidorInput>
  }

  export type SeguirScalarWhereInput = {
    AND?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
    OR?: SeguirScalarWhereInput[]
    NOT?: SeguirScalarWhereInput | SeguirScalarWhereInput[]
    id?: IntFilter<"Seguir"> | number
    usuarioSeguidorId?: IntFilter<"Seguir"> | number
    usuarioSeguidoId?: IntFilter<"Seguir"> | number
  }

  export type SeguirUpsertWithWhereUniqueWithoutUsuarioSeguidoInput = {
    where: SeguirWhereUniqueInput
    update: XOR<SeguirUpdateWithoutUsuarioSeguidoInput, SeguirUncheckedUpdateWithoutUsuarioSeguidoInput>
    create: XOR<SeguirCreateWithoutUsuarioSeguidoInput, SeguirUncheckedCreateWithoutUsuarioSeguidoInput>
  }

  export type SeguirUpdateWithWhereUniqueWithoutUsuarioSeguidoInput = {
    where: SeguirWhereUniqueInput
    data: XOR<SeguirUpdateWithoutUsuarioSeguidoInput, SeguirUncheckedUpdateWithoutUsuarioSeguidoInput>
  }

  export type SeguirUpdateManyWithWhereWithoutUsuarioSeguidoInput = {
    where: SeguirScalarWhereInput
    data: XOR<SeguirUpdateManyMutationInput, SeguirUncheckedUpdateManyWithoutUsuarioSeguidoInput>
  }

  export type UsuarioCreateWithoutRotasInput = {
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    seguidores?: SeguirCreateNestedManyWithoutUsuarioSeguidorInput
    seguidos?: SeguirCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioUncheckedCreateWithoutRotasInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    seguidores?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidorInput
    seguidos?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioCreateOrConnectWithoutRotasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutRotasInput, UsuarioUncheckedCreateWithoutRotasInput>
  }

  export type UsuarioUpsertWithoutRotasInput = {
    update: XOR<UsuarioUpdateWithoutRotasInput, UsuarioUncheckedUpdateWithoutRotasInput>
    create: XOR<UsuarioCreateWithoutRotasInput, UsuarioUncheckedCreateWithoutRotasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutRotasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutRotasInput, UsuarioUncheckedUpdateWithoutRotasInput>
  }

  export type UsuarioUpdateWithoutRotasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    seguidores?: SeguirUpdateManyWithoutUsuarioSeguidorNestedInput
    seguidos?: SeguirUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutRotasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    seguidores?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidorNestedInput
    seguidos?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioCreateWithoutSeguidoresInput = {
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaCreateNestedManyWithoutUsuarioInput
    seguidos?: SeguirCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioUncheckedCreateWithoutSeguidoresInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaUncheckedCreateNestedManyWithoutUsuarioInput
    seguidos?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidoInput
  }

  export type UsuarioCreateOrConnectWithoutSeguidoresInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSeguidoresInput, UsuarioUncheckedCreateWithoutSeguidoresInput>
  }

  export type UsuarioCreateWithoutSeguidosInput = {
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaCreateNestedManyWithoutUsuarioInput
    seguidores?: SeguirCreateNestedManyWithoutUsuarioSeguidorInput
  }

  export type UsuarioUncheckedCreateWithoutSeguidosInput = {
    id?: number
    nome: string
    email: string
    senha: string
    data_nasc?: Date | string | null
    avatar?: string | null
    sexo?: string | null
    status?: boolean
    rotas?: RotaUncheckedCreateNestedManyWithoutUsuarioInput
    seguidores?: SeguirUncheckedCreateNestedManyWithoutUsuarioSeguidorInput
  }

  export type UsuarioCreateOrConnectWithoutSeguidosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutSeguidosInput, UsuarioUncheckedCreateWithoutSeguidosInput>
  }

  export type UsuarioUpsertWithoutSeguidoresInput = {
    update: XOR<UsuarioUpdateWithoutSeguidoresInput, UsuarioUncheckedUpdateWithoutSeguidoresInput>
    create: XOR<UsuarioCreateWithoutSeguidoresInput, UsuarioUncheckedCreateWithoutSeguidoresInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSeguidoresInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSeguidoresInput, UsuarioUncheckedUpdateWithoutSeguidoresInput>
  }

  export type UsuarioUpdateWithoutSeguidoresInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUpdateManyWithoutUsuarioNestedInput
    seguidos?: SeguirUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSeguidoresInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUncheckedUpdateManyWithoutUsuarioNestedInput
    seguidos?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidoNestedInput
  }

  export type UsuarioUpsertWithoutSeguidosInput = {
    update: XOR<UsuarioUpdateWithoutSeguidosInput, UsuarioUncheckedUpdateWithoutSeguidosInput>
    create: XOR<UsuarioCreateWithoutSeguidosInput, UsuarioUncheckedCreateWithoutSeguidosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutSeguidosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutSeguidosInput, UsuarioUncheckedUpdateWithoutSeguidosInput>
  }

  export type UsuarioUpdateWithoutSeguidosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUpdateManyWithoutUsuarioNestedInput
    seguidores?: SeguirUpdateManyWithoutUsuarioSeguidorNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutSeguidosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    data_nasc?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    sexo?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    rotas?: RotaUncheckedUpdateManyWithoutUsuarioNestedInput
    seguidores?: SeguirUncheckedUpdateManyWithoutUsuarioSeguidorNestedInput
  }

  export type RotaCreateManyUsuarioInput = {
    id?: number
    nome: string
    coordenadas: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SeguirCreateManyUsuarioSeguidorInput = {
    id?: number
    usuarioSeguidoId: number
  }

  export type SeguirCreateManyUsuarioSeguidoInput = {
    id?: number
    usuarioSeguidorId: number
  }

  export type RotaUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RotaUncheckedUpdateWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RotaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    coordenadas?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeguirUpdateWithoutUsuarioSeguidorInput = {
    usuarioSeguido?: UsuarioUpdateOneRequiredWithoutSeguidosNestedInput
  }

  export type SeguirUncheckedUpdateWithoutUsuarioSeguidorInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidoId?: IntFieldUpdateOperationsInput | number
  }

  export type SeguirUncheckedUpdateManyWithoutUsuarioSeguidorInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidoId?: IntFieldUpdateOperationsInput | number
  }

  export type SeguirUpdateWithoutUsuarioSeguidoInput = {
    usuarioSeguidor?: UsuarioUpdateOneRequiredWithoutSeguidoresNestedInput
  }

  export type SeguirUncheckedUpdateWithoutUsuarioSeguidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidorId?: IntFieldUpdateOperationsInput | number
  }

  export type SeguirUncheckedUpdateManyWithoutUsuarioSeguidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuarioSeguidorId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RotaDefaultArgs instead
     */
    export type RotaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RotaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeguirDefaultArgs instead
     */
    export type SeguirArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeguirDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}